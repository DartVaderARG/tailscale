# A descriptive name for the workflow, shown in the GitHub Actions UI.
name: Build Tailscale for Windows

# Controls when the workflow will run.
on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build-windows:
    name: Build Tailscale (Windows)
    runs-on: windows-latest
    
    # This is the critical fix.
    # This environment variable tells all subsequent MSYS2 steps to operate
    # within the MINGW64 subsystem, which matches the toolchain we installed.
    # It ensures correct path handling for native Windows tools like Go.
    env:
      MSYSTEM: MINGW64

    steps:
      # Step 1: Checkout Tailscale source code
      - name: Checkout Tailscale source code
        uses: actions/checkout@v4
        with:
          repository: tailscale/tailscale
          fetch-depth: 0

      # Step 2: Set up MSYS2 and install Go and other dependencies
      - name: Set up MSYS2 and install Go
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            mingw-w64-x86_64-go
            git
            make

      # Step 3: Build tailscaled.exe
      # This step will now run in a MINGW64 shell due to the 'env' setting above.
      - name: Build tailscaled.exe
        shell: msys2 {0}
        run: ./build_dist.sh tailscale.com/cmd/tailscaled

      # Step 4: Build tailscale.exe
      - name: Build tailscale.exe
        shell: msys2 {0}
        run: ./build_dist.sh tailscale.com/cmd/tailscale

      # Step 5: Upload the compiled binaries
      - name: Upload Windows binaries
        uses: actions/upload-artifact@v4
        with:
          name: tailscale-windows-binaries
          path: |
            tailscaled.exe
            tailscale.exe
          retention-days: 7
